#!/usr/bin/env python

import os
import re
import sys
import math

########################################################################

def loginterp(x,y,x0):
    n = len(x)
    if x0 < x[0]:
        extra = True
        y0 = y[0]
    elif x0 > x[n-1]:
        extra = True
        y0 = y[n-1]
    else:
        extra = False
        i = 1
        while x[i] < x0:
            i = i + 1

        if (y[i] > 0.) and (y[i-1] > 0.) and (x[i] > 0.) and (x[i-1] > 0.):
            y0 = 10.0** (math.log10(y[i-1]) + (math.log10(y[i])-math.log10(y[i-1])) * (math.log10(x0)-math.log10(x[i-1]))/(math.log10(x[i])-math.log10(x[i-1])) )
        else:
            y0 = y[i-1] + (y[i]-y[i-1]) * (x0-x[i-1])/(x[i]-x[i-1])

    return (y0, extra)

########################################################################

def chi2_func(D_obs, N_obs, D, N, D_1, D_2):
    chi2 = 0.
    n_fit = 0
    for i in range(0,len(D)):
        x_syn = D[i]
        y_syn = N[i]
        if x_syn >= D_1 and x_syn <= D_2:
             (y_obs, extra) = loginterp(D_obs, N_obs, x_syn)
             if extra:
#                  print "Error: extrapolation is NOT allowed!"
#                  sys.exit(1)
                 pass
             else:
                 sigma2 = (y_obs/10.)**2
                 chi2 = chi2 + (y_syn-y_obs)**2/sigma2
                 n_fit = n_fit + 1

    return (chi2, n_fit)

########################################################################

# read the observed family SFD

f = open("family.dat_hc", "r")
D_obs = []
N_obs = []
for line in f:
    l = line.split()
    D_obs.append(float(l[0]))
    N_obs.append(float(l[1]))
f.close()
D_obs.reverse()
N_obs.reverse()
D_obs.pop()
N_obs.pop()
D_obs.pop(0)
N_obs.pop(0)

# ranges for parent-body size

D_PBs = range(1,20,1) + range(20,100,5) + range(100,500,10)
D_PBs = range(20,100,5) + range(100,500,10)
D_1 = 10.
D_2 = 200.

# read Durda's SFD data files

dir = '.'
for sfd in os.listdir(dir):
    filename = os.path.join(dir,sfd)
    if os.path.isfile(filename) and re.match(".*\.sfd",sfd):
        f = open(filename, "r")
        D = []
        N = []
        for line in f:
            l = line.split()
            D.append(float(l[0]))
            N.append(float(l[1]))
        f.close()
        D.reverse()
        N.reverse()

        for D_PB in D_PBs: 
            D_scaled = []
            for i in range(0,len(D)):
                D_scaled.append(D[i]*D_PB/100.)

            (chi2, n_fit) = chi2_func(D_obs, N_obs, D_scaled, N, D_1, D_2)

            print str(chi2) + "	" + str(n_fit) + " " + str(D_PB) + "	" + str(sfd)
        sys.exit(1)

        print ""


